@startuml
!pragma teoz true
/'Defines the protocol when a user updates a test. Three different implementations are shown, witht'/
/'author: Luvai Cutlerywala <luvaidc@gmail.com>'/

/'Define the actors and participants.'/
actor User as user
    participant "Web UI" as web_ui

box Backend
box Service Manager
participant "External API" as ext
control "Service Manager" as service_manager
participant "Service API" as api
end box
    participant "Deliverability Test" as deliverability_test
    participant "Deliverability Test Log" as deliverability_test_log
    participant "Messaging Service" as messenger
    participant "Deliverability Test Phones" as deliverability_test_phones
    participant "Report Generation Service" as report_generator
end box

box Database
    database deliverability_test as dt
    database deliverability_test_logs as dtl
    database deliverability_test_phones as dtp
end box

user -> web_ui: Update test with {test_id, test_metadata}.
web_ui -> service_manager: Update test with {test_id, test_metadata}.
service_manager -> deliverability_test: Update test with {test_id, test_metadata}.
activate deliverability_test
deliverability_test -> dt: Get test with {test_id}.
dt --> deliverability_test: Test with {test_id}.
deliverability_test -> dt: Update test with {test_id, test_metadata}.
alt test has recurrence_rule
    deliverability_test -> deliverability_test: Expand recurrence_rule to future test instances
    loop for each occurrence (e.g. daily for next 7 days)
        deliverability_test -> api: Insert future log entry
        api -> deliverability_test_log: Insert future log entry
        deliverability_test_log -> dtl: Insert entry
    end loop
end

alt test_type == Immediate
    deliverability_test -> service_manager : executeTest (test_id)
end
deactivate deliverability_test

@enduml
