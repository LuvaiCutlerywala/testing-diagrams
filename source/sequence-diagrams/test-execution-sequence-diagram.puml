@startuml
!pragma teoz true

/'Defines the protocol when a test is executed. For later references, this diagram represents the algorithm for the'/
/'subroutine labelled as executeTest() in the service manager.'/
/'author: Luvai Cutlerywala <luvaidc@gmail.com>'/

/'Define the actors and participants.'/
actor User as user


    participant "Web UI" as web_ui
    participant "Mobile App" as mobile_app

box Backend
    control "Service Manager" as service_manager
    box Scheduler
        participant "Test Execution Scheduler" as hourly
        participant "Send Message Scheduler" as min
    end box
    participant "Deliverability Test" as deliverability_test
    participant "Deliverability Test Log" as deliverability_test_log
    participant "Messaging Service" as messenger
    participant "Deliverability Test Phones" as deliverability_test_phones
    participant "Report Generation Service" as report_generator
end box

box Database
    database deliverability_test as dt
    database deliverability_test_logs as dtl
    database deliverability_test_phones as dtp
end box

box "Broker API"
    participant "Bandwidth API" as broker_api
end box
== Send messages==
service_manager -> messenger: executeTest() with {test_log_id,test_id}
activate messenger
loop "Iterate over messages"
    messenger -> broker_api: Send message with {message_data,test_id}.
    broker_api --> messenger: Messages sent, {message_sent_webhook}.
end
alt Messages sent successfully
activate min
    messenger --> min: Messages sent successfully.
    min -> deliverability_test_log: Update test {test_log_id} to sent.
    activate deliverability_test_log
    deliverability_test_log -> dtl: Update test with {test_log_id} to sent.
    deliverability_test_log --> min: Test updated.
    deactivate deliverability_test_log
    alt Messages delivered successfully
        broker_api --> messenger: Messages delivered, {message_delivered_webhook}.
        messenger --> min: Messages delivered successfully.
        min -> deliverability_test_log: Update test {test_log_id} to delivered.
        activate deliverability_test_log
        deliverability_test_log -> dtl: Update test with {test_log_id} to delivered.
        deliverability_test_log --> min: Test updated.
        deactivate deliverability_test_log
        mobile_app -> service_manager: Messages received, {message_metadata}.
        alt Messages received successfully
            service_manager -> deliverability_test_log: Update test {test_log_id} to received.
            activate deliverability_test_log
            deliverability_test_log -> dtl: Update test with {test_log_id} to received.
            deliverability_test_log --> service_manager: Test updated.
            deactivate deliverability_test_log
        else Messages received unsuccessfully
            service_manager -> deliverability_test_log: Update test {test_log_id} to failed.
            activate deliverability_test_log
            deliverability_test_log -> dtl: Update test with {test_log_id} to failed.
            deliverability_test_log --> service_manager: Test updated.
            deactivate deliverability_test_log
    else Messages delivered unsuccessfully
        messenger --> service_manager: Messages delivered unsuccessfully.
        service_manager -> deliverability_test_log: Update test {test_log_id} to failed.
        activate deliverability_test_log
        deliverability_test_log -> dtl: Update test with {test_log_id} to failed.
        deliverability_test_log --> service_manager: Test updated.
        deactivate deliverability_test_log
    end
else Messages sent unsuccessfully
    messenger --> min: Messages not sent successfully, {message_report}.
    min -> deliverability_test_log: Update test {test_log_id} to failed.
    activate deliverability_test_log
    deliverability_test_log -> dtl: Update test with {test_log_id} to failed.
    deliverability_test_log --> min: Test updated.
    deactivate deliverability_test_log
end
min -> service_manager: End test.
deactivate messenger
@enduml
