@startuml
!pragma teoz true
/'Defines the protocol when user submits a scheduled test, either recurring or singleton.'/
/'author: Luvai Cutlerywala <luvaidc@gmail.com>'/

/'Define the actors and participants.'/
actor User as user

box UI
    participant "Web UI" as web_ui
    participant "Mobile App" as mobile_app
end box

box Backend
    control "Service Manager" as service_manager
    box Listener
        queue "Listener Queue" as listener_queue
        participant "Listener" as listener
    end box
    participant "Scheduler" as scheduler
    participant "Deliverability Test" as deliverability_test
    participant "Deliverability Test Log" as deliverability_test_log
    participant "Messaging Service" as messenger
    participant "Deliverability Test Phones" as deliverability_test_phones
    participant "Report Generation Service" as report_generator
end box

box Database
    database deliverability_test as dt
    database deliverability_test_logs as dtl
    database deliverability_test_phones as dtp
end box

box "Broker API"
    participant "Bandwidth API" as broker_api
end box

/'Defines the interactions and protocols between the microservices.'/
user -> web_ui: Create test with {test_metadata}, to be run at {date_time}.
web_ui -> service_manager: Create test with {test_metadata}, to be run at {date_time}.
service_manager -> deliverability_test: Create test with {test_metadata}.
alt Test is a recurring scheduled test
    activate deliverability_test
    deliverability_test -> dt: Insert record with {test_id, test_metadata}.
    deliverability_test --> service_manager: Test created, {test_id}.
    deactivate deliverability_test
    service_manager -> listener_queue: Add test with {test_id, test_metadata}, to be run at {date_time}.
    listener_queue --> service_manager: Added test with {test_id, test_metadata, date_time}.
    activate listener
    listener -> listener_queue: Give latest tests to schedule.
    listener_queue --> listener: Tests with {test_id, test_metadata} scheduled at {date_times}.
    loop For all tests scheduled
        listener -> dtl: Insert test with {test_log_id, test_id, test_metadata, date_time}.
    end
    deactivate listener
else Test is a singleton scheduled test
    activate deliverability_test
    deliverability_test -> dt: Insert record with {test_id, test_metadata}.
    deliverability_test --> service_manager: Test created, {test_id}.
    deactivate deliverability_test
    service_manager -> listener_queue: Add test with {test_id, test_metadata}, to be run at {date_time}.
    listener_queue --> service_manager: Added test with {test_id, test_metadata, date_time}.
    activate listener
    listener -> listener_queue: Give latest tests to schedule.
    listener_queue --> listener: Test with {test_id, test_metadata} scheduled at {date_time}.
    listener -> dtl: Insert test with {test_log_id, test_id, test_metadata, date_time}.
    deactivate listener
end
group {date_time} is now
    scheduler -> dtl: Get tests with {date_time}, scheduled for now.
    note left
        The scheduler polls the table every minute.
    end note
    dtl --> scheduler: Test with {test_log_id, test_id, test_metadata} scheduled for now.
    scheduler -> service_manager: Start test with {test_log_id, test_id, test_metadata}.
    service_manager -> deliverability_test: Get test with {test_id}.
    activate deliverability_test
    deliverability_test -> dt: Get test with {test_id}.
    dt --> deliverability_test: Test with {test_id, test_metadata}.
    deliverability_test --> service_manager: Test with {test_id, test_metadata}.
    deactivate deliverability_test
    service_manager -> service_manager: executeTest()
@enduml