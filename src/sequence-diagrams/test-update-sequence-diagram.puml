@startuml
!pragma teoz true
/'Defines the protocol when a user updates a test. Three different implementations are shown, witht'/
/'author: Luvai Cutlerywala <luvaidc@gmail.com>'/

/'Define the actors and participants.'/
actor User as user

box UI
    participant "Web UI" as web_ui
    participant "Mobile App" as mobile_app
end box

box Backend
    control "Service Manager" as service_manager

    box Listener
        queue "Listener Queue" as listener_queue
        participant "Listener" as listener
    end box

    participant "Scheduler" as scheduler
    participant "Deliverability Test" as deliverability_test
    participant "Deliverability Test Log" as deliverability_test_log
    participant "Messaging Service" as messenger
    participant "Deliverability Test Phones" as deliverability_test_phones
    participant "Report Generation Service" as report_generator
    participant "Authentication Service" as auth
end box

box Database
    database deliverability_test as dt
    database deliverability_test_logs as dtl
    database deliverability_test_phones as dtp
    database clients as clients
end box

box "Broker API"
    participant "Bandwidth API" as broker_api
end box

user -> web_ui: Update test with {test_id, test_metadata}.
web_ui -> service_manager: Update test with {test_id, test_metadata}.
service_manager -> deliverability_test: Update test with {test_id, test_metadata}.
activate deliverability_test
deliverability_test -> dt: Get test with {test_id}.
dt --> deliverability_test: Test with {test_id}.
deliverability_test -> dt: Update test with {test_id, test_metadata}.
deliverability_test --> service_manager: Previous schedule, {test_metadata}.
deactivate deliverability_test
alt Schedule changed
    alt Test with immediate test
        service_manager -> deliverability_test_log: Initiate test with {test_id, test_metadata}.
        activate deliverability_test_log
        deliverability_test_log -> dtl: Insert record with {test_log_id, test_id, test_metadata}.
        deliverability_test_log --> service_manager: Test initiated, {test_log_id}.
        deactivate deliverability_test_log
        service_manager -> service_manager: executeTest()
    else Test with recurring scheduled test
        service_manager -> listener_queue: Add test with {test_id, test_metadata}, to be run at {date_time}.
        listener_queue --> service_manager: Added test with {test_id, test_metadata, date_time}.
        activate listener
        listener -> listener_queue: Give latest tests to schedule.
        listener_queue --> listener: Tests with {test_id, test_metadata} scheduled at {date_times}.
        loop For all tests scheduled
            listener -> dtl: Insert test with {test_log_id, test_id, test_metadata, date_time}.
        end
        deactivate listener
    else Test with singleton scheduled test
        service_manager -> listener_queue: Add test with {test_id, test_metadata}, to be run at {date_time}.
        listener_queue --> service_manager: Added test with {test_id, test_metadata, date_time}.
        activate listener
        listener -> listener_queue: Give latest tests to schedule.
        listener_queue --> listener: Test with {test_id, test_metadata} scheduled at {date_time}.
        listener -> dtl: Insert test with {test_log_id, test_id, test_metadata, date_time}.
        deactivate listener
    end
end
@enduml