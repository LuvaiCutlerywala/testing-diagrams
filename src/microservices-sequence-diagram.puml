@startuml

/'Define the actors and participants.'/
actor User as user

box UI
    participant "Web UI" as web_ui
    participant "Mobile App" as mobile_app
end box

box Backend
    control "Service Manager" as service_manager
    participant "Scheduler" as scheduler
    participant "Deliverability Test" as deliverability_test
    participant "Deliverability Test Log" as deliverability_test_log
    participant "Messaging Service" as messenger
    participant "Deliverability Test Phones" as deliverability_test_phones
end box

box Database
    database deliverability_test as dt
    database deliverability_test_logs as dtl
    database deliverability_test_phones as dtp
end box

box "Broker API"
    participant "Bandwidth API" as broker_api
end box

user -> service_manager: Create test with {test_metadata}.
service_manager -> deliverability_test: Create test with {test_metadata}.
activate deliverability_test
deliverability_test -> dt: Insert record with {test_id, test_metadata}.
deliverability_test --> service_manager: Test created, {test_id}.
deactivate deliverability_test
service_manager -> scheduler: Schedule test with {test_id, date_time}.
alt {date_time} is now
    scheduler --> service_manager: Initiate Test, {test_id}.
    service_manager -> deliverability_test: Get test metadata for {test_id}.
    activate deliverability_test
    deliverability_test -> dt: Get entity with {test_id}.
    dt --> deliverability_test: {test_id, test_metadata}.
    deliverability_test --> service_manager: {test_metadata}
    deactivate deliverability_test
    service_manager -> deliverability_test_log: Initiate test with {test_id, test_metadata}.
    activate deliverability_test_log
    deliverability_test_log -> dtl: Insert record with {test_log_id, test_id, test_metadata}.
    deliverability_test_log --> service_manager: Test initiated, {test_log_id}.
    deactivate deliverability_test_log
    service_manager -> messenger: Send messages with {message_data}.
    activate messenger
    loop "Number of messages times"
        messenger -> broker_api: Send message with {message_data}[i].
        broker_api --> messenger: Message sent, {message_sent_webhook}.
    end
    alt Messages sent successfully
        messenger --> service_manager: Messages sent successfully.
        service_manager -> deliverability_test_log: Update test {test_log_id} to sent.
        activate deliverability_test_log
        deliverability_test_log -> dtl: Update test with {test_log_id} to sent.
        deliverability_test_log --> service_manager: Test updated.
        deactivate deliverability_test_log
    else Messages sent unsuccessfully
        messenger --> service_manager: Messages not sent successfully, {message_report}.
        service_manager -> deliverability_test_log: Update test {test_log_id} to sent.
        activate deliverability_test_log
        deliverability_test_log -> dtl: Update test with {test_log_id} to sent.
        deliverability_test_log --> service_manager: Test updated.
        deactivate deliverability_test_log
        service_manager -> service_manager: End test.
    end
else {date_time} is later
    scheduler --> service_manager: Test scheduled.
end

@enduml
